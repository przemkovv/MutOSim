"let &l:makeprg="make -C ".g:localvimrc_script_dir
"let &l:makeprg="make -j 10"

"let g:ycm_server_log_level = 'debug'
"let g:ycm_confirm_extra_conf = 0
"let g:ctrlp_root_directory = "."

set tags=tags,./tags
"let g:easytags_file = "./tags"
let g:easytags_opts = ["--options=./.ctags"]

":UpdateTags -R

set path=.,**/*

let g:cmake_c_compiler = 'clang'
let g:cmake_cxx_compiler = 'clang++'
let g:cmake_build_dirs = [ "build" ]
let g:cmake_build_type = "Release"
let g:cmake_set_makeprg = 1

let g:cmake_build_shared_libs = 1


let g:neomake_cpp_clangcheck_args = ['-p=build/ -analyze']
let g:neomake_cpp_clang_args = [
            \ '-std=c++17','-DSIM_DEBUG=1','-DSPDLOG_FMT_EXTERNAL','-D_GLIBCXX_PARALLEL',
            \ '-I./src','-fopenmp=libomp','-O2','-DNDEBUG', '-fsyntax-only', '-fsanitize=undefined',
            \ '-g','-Werror','-Weffc++','-Weverything','-Wno-c++98-compat','-Wno-padded']
let g:neomake_cpp_clangtidy_args = ['-p=build/',
            \ '--checks=*',
            \ '--header-filter="(?!pprint.hpp|?!json.hpp).*"',
            \ '--export-fixes=.clang-tidy-fixes']

let g:clang_compilation_database = "build/"

let g:gutentags_ctags_options_file ='.ctags'
let g:gutentags_generate_on_write = 0

set makeprg=make\ -j3\ -C\ build/

autocmd BufWritePost *.h,*.hpp,*.cpp,*.c :NeomakeSh! make -C build/ ctags > /dev/null

